"use strict";var _NumberparseInt=Number.parseInt;let a=require("utils"),b=require("api"),c=require("chart.js"),d=require("quantum-numbers.js"),f={elements:{form:document.getElementById("ha-form"),canvas:document.getElementById("ha-canvas"),numN:document.getElementById("ha-num-n"),numL:document.getElementById("ha-num-l")},init(){"0"===a.getQuery("controls")&&this.elements.form.classList.add("hidden"),this.syncInputs(),this.addEventHandlers()},addEventHandlers(){if("0"!==a.getQuery("controls")){let g=this.elements.form;g.addEventListener("change",this.quantumNumberChangeHandler.bind(this),!1),g.addEventListener("submit",this.submitHandler.bind(this),!1)}},quantumNumberChangeHandler({target:g}){let h=g.value.replace(/\D/g,"");d[g.name]=+h,this.syncInputs(),this.queueChartUpdate(),b.emit("changeQuantumNumbers")},submitHandler(g){g.preventDefault(),this.queueChartUpdate(!0)},syncInputs(){if("0"!==a.getQuery("controls")){let{numN:g,numL:h}=this.elements;g.max=d.nMax,g.min=d.nMin,g.value=d.n,h.max=d.lMax,h.min=d.lMin,h.value=d.l}},queueChartUpdate(g){this.debounceTimerId&&clearTimeout(this.debounceTimerId),this.debounceTimerId=setTimeout(()=>{this.updateChart(),this.debounceTimerId=null},g?0:750)},updateChart(){c.updateSeries(d.n,d.l)}};b.init({widget:"HA",messageData:{changeQuantumNumbers(){return{n:d.n,l:d.l}}},methods:{setQuantumNumbers(g=d.n,h=d.l){d.n=g,d.l=h,f.syncInputs(),f.queueChartUpdate(!0),b.emit("changeQuantumNumbers")}}}),d.n=_NumberparseInt(a.getQuery("n")),d.l=_NumberparseInt(a.getQuery("l")),c.create(f.elements.canvas,d.n,d.l),f.init(),document.body.classList.remove("loading"),module.exports={};